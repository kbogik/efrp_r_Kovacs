CrossCorrInput <- function(AssetList,StarDate,EndDate,WindowLength,LagLength){
  variables <- list(AssetList,StarDate,EndDate,WindowLength,LagLength)
  return(variables)
  }
  
 ##############################
  
  PrepareDatabase <- function(df,StartDate,EndDate,SelectColumns){
    x <- as.Date(StartDate)
    y <- as.Date(EndDate)
     RawData <- df[df$Date >= x & df$Date <= y,] %>%
                dplyr::as_tibble() %>%
                dplyr::select(SelectColumns)
    return(RawData)
    
 ##############################

TSDiff <- function(df){
  colnumbers <- ncol(df)
  rownumbers <- nrow(df)
  
  for (asset3 in 2:rownumbers-1){
    for (asset4 in 2:colnumbers){
      df[[asset3,asset4]]<-df[[asset3+1,asset4]]-df[[asset3,asset4]]
    }
  }
  
  #a differenciazas miatt az utolso sort torolhetjuk
  df<- df[-rownumbers,]
  return(df)
}

##############################

CrossCorrAnalysis <- function(RawData,lengthlag,lengthwindow){
  colnumbers <- ncol(RawData)
  rownumbers <- nrow(RawData)
  colnames <- c()
  runwindow=0
  k=0
  
  eredmeny <- matrix(1,nrow = rownumbers-lengthwindow-lengthlag,ncol = ((colnumbers-1)*(colnumbers-2)))
  
  for (asset1 in 2:colnumbers) {
    for (asset2 in 2:colnumbers){
      if (asset1!=asset2){
        
        k=k+1
        
        #elnevezzük az oszlopokat
        
        newelem <-paste0("(",colnames(RawData)[asset1],",",colnames(RawData)[asset2],")")
        colnames <- c(colnames,newelem)
        
        #majd feltöltjük a korreláció ereményeivel
        
        for (runwindow in 1:(rownumbers-lwindow-llag)){
          
          eredmeny[runwindow,k]=cor(RawData[runwindow:(lengthwindow+runwindow),asset1],RawData[(runwindow+lengthlag):(lengthwindow+runwindow+lengthlag),asset2])
        }
      }
    }
  }
  #elneveztük a ciklusban kapott nevekre az oszlopokat
  
  colnames(eredmeny)=colnames
  return(eredmeny)
}
